{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LAMMERT\\\\Desktop\\\\poryecto\\\\budget-manager-app\\\\src\\\\components\\\\PersonalFinance.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport './PersonalFinance.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst incomeCategories = [\"Salary – Wages earned from full-time or part-time employment\", \"Hourly Wages – Income earned based on hours worked\", \"Self-Employment Income – Earnings from freelancing, consulting, or running a business\", \"Commission – Earnings based on sales performance (e.g., real estate agents, salespeople)\", \"Bonuses – Extra earnings from work performance or company profits\", \"Investment Income – Dividends from stocks, interest from bonds\", \"Rental Income – Earnings from renting out property\", \"Royalties – Income from intellectual property, books, music, patents\", \"Affiliate Marketing Income – Earnings from promoting products/services\", \"Advertising Revenue – Income from YouTube, blogs, or social media monetization\", \"Unemployment Benefits – Financial aid for those out of work\", \"Disability Benefits – Government support for individuals with disabilities\", \"Social Security/Pension – Retirement benefits\", \"Child Support/Alimony – Payments received from a former spouse\", \"Scholarships/Grants – Education funding that doesn’t require repayment\", \"Side Hustles – Income from gig work (Uber, Airbnb, online selling, etc.)\", \"Lottery & Gambling Winnings – Money won from betting, casinos, or lotteries\", \"Inheritances & Gifts – Money received from family or friends\", \"Tax Refunds – Money returned by the government after tax filing\"];\nconst expenseCategories = [\"Housing – Rent, mortgage, property taxes, home maintenance\", \"Utilities – Electricity, water, gas, internet, phone bills\", \"Groceries – Food, household essentials\", \"Transportation – Fuel, public transport, car payments, maintenance, insurance\", \"Healthcare – Insurance, medical bills, prescriptions, dental, vision care\", \"Debt Payments – Loan repayments, credit card bills\", \"Insurance – Health, life, car, home, disability insurance\", \"Discretionary Expenses (Wants) – Dining Out, Entertainment, Shopping, Travel & Vacations, Subscriptions, Gifts & Donations\", \"Savings & Investments – Emergency Fund, Retirement Savings, Education\"];\nconst PersonalFinance = () => {\n  _s();\n  const [income, setIncome] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [selectedIncomeCategory, setSelectedIncomeCategory] = useState('');\n  const [incomeAmount, setIncomeAmount] = useState('');\n  const [selectedExpenseCategory, setSelectedExpenseCategory] = useState('');\n  const [expenseAmount, setExpenseAmount] = useState('');\n  const [darkMode, setDarkMode] = useState(false);\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const addIncome = () => {\n    if (selectedIncomeCategory && incomeAmount) {\n      setIncome([...income, {\n        category: selectedIncomeCategory,\n        amount: parseFloat(incomeAmount)\n      }]);\n      setSelectedIncomeCategory('');\n      setIncomeAmount('');\n    }\n  };\n  const addExpense = () => {\n    if (selectedExpenseCategory && expenseAmount) {\n      setExpenses([...expenses, {\n        category: selectedExpenseCategory,\n        amount: parseFloat(expenseAmount)\n      }]);\n      setSelectedExpenseCategory('');\n      setExpenseAmount('');\n    }\n  };\n  const editIncome = index => {\n    const newAmount = prompt(\"Enter new amount:\", income[index].amount);\n    if (newAmount) {\n      const updatedIncome = [...income];\n      updatedIncome[index].amount = parseFloat(newAmount);\n      setIncome(updatedIncome);\n    }\n  };\n  const removeIncome = index => {\n    const updatedIncome = income.filter((_, i) => i !== index);\n    setIncome(updatedIncome);\n  };\n  const editExpense = index => {\n    const newAmount = prompt(\"Enter new amount:\", expenses[index].amount);\n    if (newAmount) {\n      const updatedExpenses = [...expenses];\n      updatedExpenses[index].amount = parseFloat(newAmount);\n      setExpenses(updatedExpenses);\n    }\n  };\n  const removeExpense = index => {\n    const updatedExpenses = expenses.filter((_, i) => i !== index);\n    setExpenses(updatedExpenses);\n  };\n  const totalIncome = income.reduce((acc, curr) => acc + curr.amount, 0);\n  const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n  const balance = totalIncome - totalExpenses;\n  const data = {\n    labels: ['Income', 'Expenses'],\n    datasets: [{\n      label: 'Amount (£)',\n      data: [totalIncome, totalExpenses],\n      backgroundColor: ['#4CAF50', '#FF6384']\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `personal-finance ${darkMode ? 'dark-mode' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Personal Finance Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDarkMode,\n      className: \"toggle-dark-mode\",\n      children: darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finance-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedIncomeCategory,\n            onChange: e => setSelectedIncomeCategory(e.target.value),\n            className: \"finance-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Income Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), incomeCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: category,\n              children: category\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: incomeAmount,\n            onChange: e => setIncomeAmount(e.target.value),\n            placeholder: \"Income Amount (\\xA3)\",\n            className: \"finance-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addIncome,\n            className: \"finance-button\",\n            children: \"Add Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: income.map((inc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [inc.category, \": \\xA3\", inc.amount, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => editIncome(index),\n                className: \"edit-button\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeIncome(index),\n                className: \"remove-button\",\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Expenses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: selectedExpenseCategory,\n            onChange: e => setSelectedExpenseCategory(e.target.value),\n            className: \"finance-select\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select Expense Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), expenseCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: category,\n              children: category\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: expenseAmount,\n            onChange: e => setExpenseAmount(e.target.value),\n            placeholder: \"Expense Amount (\\xA3)\",\n            className: \"finance-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addExpense,\n            className: \"finance-button\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: expenses.map((expense, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [expense.category, \": \\xA3\", expense.amount, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => editExpense(index),\n                className: \"edit-button\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeExpense(index),\n                className: \"remove-button\",\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finance-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Total Income: \\xA3\", totalIncome]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Total Expenses: \\xA3\", totalExpenses]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Balance: \\xA3\", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Financial Overview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n_s(PersonalFinance, \"8DYzEq33+w6PbySypUzDM/irjiQ=\");\n_c = PersonalFinance;\nexport default PersonalFinance;\nvar _c;\n$RefreshReg$(_c, \"PersonalFinance\");","map":{"version":3,"names":["React","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","incomeCategories","expenseCategories","PersonalFinance","_s","income","setIncome","expenses","setExpenses","selectedIncomeCategory","setSelectedIncomeCategory","incomeAmount","setIncomeAmount","selectedExpenseCategory","setSelectedExpenseCategory","expenseAmount","setExpenseAmount","darkMode","setDarkMode","toggleDarkMode","addIncome","category","amount","parseFloat","addExpense","editIncome","index","newAmount","prompt","updatedIncome","removeIncome","filter","_","i","editExpense","updatedExpenses","removeExpense","totalIncome","reduce","acc","curr","totalExpenses","balance","data","labels","datasets","label","backgroundColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","map","type","placeholder","inc","expense","_c","$RefreshReg$"],"sources":["C:/Users/LAMMERT/Desktop/poryecto/budget-manager-app/src/components/PersonalFinance.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport './PersonalFinance.css';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst incomeCategories = [\n    \"Salary – Wages earned from full-time or part-time employment\",\n    \"Hourly Wages – Income earned based on hours worked\",\n    \"Self-Employment Income – Earnings from freelancing, consulting, or running a business\",\n    \"Commission – Earnings based on sales performance (e.g., real estate agents, salespeople)\",\n    \"Bonuses – Extra earnings from work performance or company profits\",\n    \"Investment Income – Dividends from stocks, interest from bonds\",\n    \"Rental Income – Earnings from renting out property\",\n    \"Royalties – Income from intellectual property, books, music, patents\",\n    \"Affiliate Marketing Income – Earnings from promoting products/services\",\n    \"Advertising Revenue – Income from YouTube, blogs, or social media monetization\",\n    \"Unemployment Benefits – Financial aid for those out of work\",\n    \"Disability Benefits – Government support for individuals with disabilities\",\n    \"Social Security/Pension – Retirement benefits\",\n    \"Child Support/Alimony – Payments received from a former spouse\",\n    \"Scholarships/Grants – Education funding that doesn’t require repayment\",\n    \"Side Hustles – Income from gig work (Uber, Airbnb, online selling, etc.)\",\n    \"Lottery & Gambling Winnings – Money won from betting, casinos, or lotteries\",\n    \"Inheritances & Gifts – Money received from family or friends\",\n    \"Tax Refunds – Money returned by the government after tax filing\"\n];\n\nconst expenseCategories = [\n    \"Housing – Rent, mortgage, property taxes, home maintenance\",\n    \"Utilities – Electricity, water, gas, internet, phone bills\",\n    \"Groceries – Food, household essentials\",\n    \"Transportation – Fuel, public transport, car payments, maintenance, insurance\",\n    \"Healthcare – Insurance, medical bills, prescriptions, dental, vision care\",\n    \"Debt Payments – Loan repayments, credit card bills\",\n    \"Insurance – Health, life, car, home, disability insurance\",\n    \"Discretionary Expenses (Wants) – Dining Out, Entertainment, Shopping, Travel & Vacations, Subscriptions, Gifts & Donations\",\n    \"Savings & Investments – Emergency Fund, Retirement Savings, Education\"\n];\n\nconst PersonalFinance = () => {\n    const [income, setIncome] = useState([]);\n    const [expenses, setExpenses] = useState([]);\n    const [selectedIncomeCategory, setSelectedIncomeCategory] = useState('');\n    const [incomeAmount, setIncomeAmount] = useState('');\n    const [selectedExpenseCategory, setSelectedExpenseCategory] = useState('');\n    const [expenseAmount, setExpenseAmount] = useState('');\n    const [darkMode, setDarkMode] = useState(false);\n\n    const toggleDarkMode = () => {\n        setDarkMode(!darkMode);\n    };\n\n    const addIncome = () => {\n        if (selectedIncomeCategory && incomeAmount) {\n            setIncome([...income, { category: selectedIncomeCategory, amount: parseFloat(incomeAmount) }]);\n            setSelectedIncomeCategory('');\n            setIncomeAmount('');\n        }\n    };\n\n    const addExpense = () => {\n        if (selectedExpenseCategory && expenseAmount) {\n            setExpenses([...expenses, { category: selectedExpenseCategory, amount: parseFloat(expenseAmount) }]);\n            setSelectedExpenseCategory('');\n            setExpenseAmount('');\n        }\n    };\n\n    const editIncome = (index) => {\n        const newAmount = prompt(\"Enter new amount:\", income[index].amount);\n        if (newAmount) {\n            const updatedIncome = [...income];\n            updatedIncome[index].amount = parseFloat(newAmount);\n            setIncome(updatedIncome);\n        }\n    };\n\n    const removeIncome = (index) => {\n        const updatedIncome = income.filter((_, i) => i !== index);\n        setIncome(updatedIncome);\n    };\n\n    const editExpense = (index) => {\n        const newAmount = prompt(\"Enter new amount:\", expenses[index].amount);\n        if (newAmount) {\n            const updatedExpenses = [...expenses];\n            updatedExpenses[index].amount = parseFloat(newAmount);\n            setExpenses(updatedExpenses);\n        }\n    };\n\n    const removeExpense = (index) => {\n        const updatedExpenses = expenses.filter((_, i) => i !== index);\n        setExpenses(updatedExpenses);\n    };\n\n    const totalIncome = income.reduce((acc, curr) => acc + curr.amount, 0);\n    const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n    const balance = totalIncome - totalExpenses;\n\n    const data = {\n        labels: ['Income', 'Expenses'],\n        datasets: [\n            {\n                label: 'Amount (£)',\n                data: [totalIncome, totalExpenses],\n                backgroundColor: ['#4CAF50', '#FF6384'],\n            },\n        ],\n    };\n\n    return (\n        <div className={`personal-finance ${darkMode ? 'dark-mode' : ''}`}>\n            <h2>Personal Finance Management</h2>\n            <button onClick={toggleDarkMode} className=\"toggle-dark-mode\">\n                {darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\n            </button>\n            <div className=\"finance-container\">\n                <div className=\"finance-form\">\n                    <div>\n                        <h3>Income</h3>\n                        <select \n                            value={selectedIncomeCategory} \n                            onChange={(e) => setSelectedIncomeCategory(e.target.value)}\n                            className=\"finance-select\"\n                        >\n                            <option value=\"\">Select Income Category</option>\n                            {incomeCategories.map((category, index) => (\n                                <option key={index} value={category}>{category}</option>\n                            ))}\n                        </select>\n                        <input \n                            type=\"number\" \n                            value={incomeAmount} \n                            onChange={(e) => setIncomeAmount(e.target.value)} \n                            placeholder=\"Income Amount (£)\" \n                            className=\"finance-input\"\n                        />\n                        <button onClick={addIncome} className=\"finance-button\">Add Income</button>\n                        <ul>\n                            {income.map((inc, index) => (\n                                <li key={index}>\n                                    {inc.category}: £{inc.amount}\n                                    <button onClick={() => editIncome(index)} className=\"edit-button\">Edit</button>\n                                    <button onClick={() => removeIncome(index)} className=\"remove-button\">Remove</button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    <div>\n                        <h3>Expenses</h3>\n                        <select \n                            value={selectedExpenseCategory} \n                            onChange={(e) => setSelectedExpenseCategory(e.target.value)}\n                            className=\"finance-select\"\n                        >\n                            <option value=\"\">Select Expense Category</option>\n                            {expenseCategories.map((category, index) => (\n                                <option key={index} value={category}>{category}</option>\n                            ))}\n                        </select>\n                        <input \n                            type=\"number\" \n                            value={expenseAmount} \n                            onChange={(e) => setExpenseAmount(e.target.value)} \n                            placeholder=\"Expense Amount (£)\" \n                            className=\"finance-input\"\n                        />\n                        <button onClick={addExpense} className=\"finance-button\">Add Expense</button>\n                        <ul>\n                            {expenses.map((expense, index) => (\n                                <li key={index}>\n                                    {expense.category}: £{expense.amount}\n                                    <button onClick={() => editExpense(index)} className=\"edit-button\">Edit</button>\n                                    <button onClick={() => removeExpense(index)} className=\"remove-button\">Remove</button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"finance-overview\">\n                    <h3>Total Income: £{totalIncome}</h3>\n                    <h3>Total Expenses: £{totalExpenses}</h3>\n                    <h3>Balance: £{balance}</h3>\n                    <h3>Financial Overview</h3>\n                    <Bar data={data} />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PersonalFinance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}