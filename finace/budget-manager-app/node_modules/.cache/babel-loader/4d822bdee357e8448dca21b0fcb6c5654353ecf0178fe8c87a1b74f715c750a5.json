{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LAMMERT\\\\Desktop\\\\poryecto\\\\budget-manager-app\\\\src\\\\components\\\\PersonalFinance.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst incomeCategories = [\"Salary – Wages earned from full-time or part-time employment\", \"Hourly Wages – Income earned based on hours worked\", \"Self-Employment Income – Earnings from freelancing, consulting, or running a business\", \"Commission – Earnings based on sales performance (e.g., real estate agents, salespeople)\", \"Bonuses – Extra earnings from work performance or company profits\", \"Investment Income – Dividends from stocks, interest from bonds\", \"Rental Income – Earnings from renting out property\", \"Royalties – Income from intellectual property, books, music, patents\", \"Affiliate Marketing Income – Earnings from promoting products/services\", \"Advertising Revenue – Income from YouTube, blogs, or social media monetization\", \"Unemployment Benefits – Financial aid for those out of work\", \"Disability Benefits – Government support for individuals with disabilities\", \"Social Security/Pension – Retirement benefits\", \"Child Support/Alimony – Payments received from a former spouse\", \"Scholarships/Grants – Education funding that doesn’t require repayment\", \"Side Hustles – Income from gig work (Uber, Airbnb, online selling, etc.)\", \"Lottery & Gambling Winnings – Money won from betting, casinos, or lotteries\", \"Inheritances & Gifts – Money received from family or friends\", \"Tax Refunds – Money returned by the government after tax filing\"];\nconst expenseCategories = [\"Housing – Rent, mortgage, property taxes, home maintenance\", \"Utilities – Electricity, water, gas, internet, phone bills\", \"Groceries – Food, household essentials\", \"Transportation – Fuel, public transport, car payments, maintenance, insurance\", \"Healthcare – Insurance, medical bills, prescriptions, dental, vision care\", \"Debt Payments – Loan repayments, credit card bills\", \"Insurance – Health, life, car, home, disability insurance\", \"Discretionary Expenses (Wants) – Dining Out, Entertainment, Shopping, Travel & Vacations, Subscriptions, Gifts & Donations\", \"Savings & Investments – Emergency Fund, Retirement Savings, Education\"];\nconst PersonalFinance = () => {\n  _s();\n  const [income, setIncome] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [selectedIncomeCategory, setSelectedIncomeCategory] = useState('');\n  const [incomeAmount, setIncomeAmount] = useState('');\n  const [selectedExpenseCategory, setSelectedExpenseCategory] = useState('');\n  const [expenseAmount, setExpenseAmount] = useState('');\n  const addIncome = () => {\n    if (selectedIncomeCategory && incomeAmount) {\n      setIncome([...income, {\n        category: selectedIncomeCategory,\n        amount: parseFloat(incomeAmount)\n      }]);\n      setSelectedIncomeCategory('');\n      setIncomeAmount('');\n    }\n  };\n  const addExpense = () => {\n    if (selectedExpenseCategory && expenseAmount) {\n      setExpenses([...expenses, {\n        category: selectedExpenseCategory,\n        amount: parseFloat(expenseAmount)\n      }]);\n      setSelectedExpenseCategory('');\n      setExpenseAmount('');\n    }\n  };\n  const totalIncome = income.reduce((acc, curr) => acc + curr.amount, 0);\n  const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n  const balance = totalIncome - totalExpenses;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"personal-finance\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Personal Finance Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Income\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedIncomeCategory,\n        onChange: e => setSelectedIncomeCategory(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Income Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), incomeCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category,\n          children: category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: incomeAmount,\n        onChange: e => setIncomeAmount(e.target.value),\n        placeholder: \"Income Amount (\\xA3)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addIncome,\n        children: \"Add Income\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: income.map((inc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [inc.category, \": \\xA3\", inc.amount]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Expenses\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedExpenseCategory,\n        onChange: e => setSelectedExpenseCategory(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Expense Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), expenseCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category,\n          children: category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: expenseAmount,\n        onChange: e => setExpenseAmount(e.target.value),\n        placeholder: \"Expense Amount (\\xA3)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addExpense,\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: expenses.map((expense, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [expense.category, \": \\xA3\", expense.amount]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Income: \\xA3\", totalIncome]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Expenses: \\xA3\", totalExpenses]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Balance: \\xA3\", balance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(PersonalFinance, \"xdWeDu4k+yuZyaKvvTzOaz+gIbQ=\");\n_c = PersonalFinance;\nexport default PersonalFinance;\nvar _c;\n$RefreshReg$(_c, \"PersonalFinance\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","incomeCategories","expenseCategories","PersonalFinance","_s","income","setIncome","expenses","setExpenses","selectedIncomeCategory","setSelectedIncomeCategory","incomeAmount","setIncomeAmount","selectedExpenseCategory","setSelectedExpenseCategory","expenseAmount","setExpenseAmount","addIncome","category","amount","parseFloat","addExpense","totalIncome","reduce","acc","curr","totalExpenses","balance","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","index","type","placeholder","onClick","inc","expense","_c","$RefreshReg$"],"sources":["C:/Users/LAMMERT/Desktop/poryecto/budget-manager-app/src/components/PersonalFinance.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst incomeCategories = [\n    \"Salary – Wages earned from full-time or part-time employment\",\n    \"Hourly Wages – Income earned based on hours worked\",\n    \"Self-Employment Income – Earnings from freelancing, consulting, or running a business\",\n    \"Commission – Earnings based on sales performance (e.g., real estate agents, salespeople)\",\n    \"Bonuses – Extra earnings from work performance or company profits\",\n    \"Investment Income – Dividends from stocks, interest from bonds\",\n    \"Rental Income – Earnings from renting out property\",\n    \"Royalties – Income from intellectual property, books, music, patents\",\n    \"Affiliate Marketing Income – Earnings from promoting products/services\",\n    \"Advertising Revenue – Income from YouTube, blogs, or social media monetization\",\n    \"Unemployment Benefits – Financial aid for those out of work\",\n    \"Disability Benefits – Government support for individuals with disabilities\",\n    \"Social Security/Pension – Retirement benefits\",\n    \"Child Support/Alimony – Payments received from a former spouse\",\n    \"Scholarships/Grants – Education funding that doesn’t require repayment\",\n    \"Side Hustles – Income from gig work (Uber, Airbnb, online selling, etc.)\",\n    \"Lottery & Gambling Winnings – Money won from betting, casinos, or lotteries\",\n    \"Inheritances & Gifts – Money received from family or friends\",\n    \"Tax Refunds – Money returned by the government after tax filing\"\n];\n\nconst expenseCategories = [\n    \"Housing – Rent, mortgage, property taxes, home maintenance\",\n    \"Utilities – Electricity, water, gas, internet, phone bills\",\n    \"Groceries – Food, household essentials\",\n    \"Transportation – Fuel, public transport, car payments, maintenance, insurance\",\n    \"Healthcare – Insurance, medical bills, prescriptions, dental, vision care\",\n    \"Debt Payments – Loan repayments, credit card bills\",\n    \"Insurance – Health, life, car, home, disability insurance\",\n    \"Discretionary Expenses (Wants) – Dining Out, Entertainment, Shopping, Travel & Vacations, Subscriptions, Gifts & Donations\",\n    \"Savings & Investments – Emergency Fund, Retirement Savings, Education\"\n];\n\nconst PersonalFinance = () => {\n    const [income, setIncome] = useState([]);\n    const [expenses, setExpenses] = useState([]);\n    const [selectedIncomeCategory, setSelectedIncomeCategory] = useState('');\n    const [incomeAmount, setIncomeAmount] = useState('');\n    const [selectedExpenseCategory, setSelectedExpenseCategory] = useState('');\n    const [expenseAmount, setExpenseAmount] = useState('');\n\n    const addIncome = () => {\n        if (selectedIncomeCategory && incomeAmount) {\n            setIncome([...income, { category: selectedIncomeCategory, amount: parseFloat(incomeAmount) }]);\n            setSelectedIncomeCategory('');\n            setIncomeAmount('');\n        }\n    };\n\n    const addExpense = () => {\n        if (selectedExpenseCategory && expenseAmount) {\n            setExpenses([...expenses, { category: selectedExpenseCategory, amount: parseFloat(expenseAmount) }]);\n            setSelectedExpenseCategory('');\n            setExpenseAmount('');\n        }\n    };\n\n    const totalIncome = income.reduce((acc, curr) => acc + curr.amount, 0);\n    const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n    const balance = totalIncome - totalExpenses;\n\n    return (\n        <div className=\"personal-finance\">\n            <h2>Personal Finance Management</h2>\n            <div>\n                <h3>Income</h3>\n                <select \n                    value={selectedIncomeCategory} \n                    onChange={(e) => setSelectedIncomeCategory(e.target.value)}\n                >\n                    <option value=\"\">Select Income Category</option>\n                    {incomeCategories.map((category, index) => (\n                        <option key={index} value={category}>{category}</option>\n                    ))}\n                </select>\n                <input \n                    type=\"number\" \n                    value={incomeAmount} \n                    onChange={(e) => setIncomeAmount(e.target.value)} \n                    placeholder=\"Income Amount (£)\" \n                />\n                <button onClick={addIncome}>Add Income</button>\n                <ul>\n                    {income.map((inc, index) => (\n                        <li key={index}>{inc.category}: £{inc.amount}</li>\n                    ))}\n                </ul>\n            </div>\n            <div>\n                <h3>Expenses</h3>\n                <select \n                    value={selectedExpenseCategory} \n                    onChange={(e) => setSelectedExpenseCategory(e.target.value)}\n                >\n                    <option value=\"\">Select Expense Category</option>\n                    {expenseCategories.map((category, index) => (\n                        <option key={index} value={category}>{category}</option>\n                    ))}\n                </select>\n                <input \n                    type=\"number\" \n                    value={expenseAmount} \n                    onChange={(e) => setExpenseAmount(e.target.value)} \n                    placeholder=\"Expense Amount (£)\" \n                />\n                <button onClick={addExpense}>Add Expense</button>\n                <ul>\n                    {expenses.map((expense, index) => (\n                        <li key={index}>{expense.category}: £{expense.amount}</li>\n                    ))}\n                </ul>\n            </div>\n            <div>\n                <h3>Total Income: £{totalIncome}</h3>\n                <h3>Total Expenses: £{totalExpenses}</h3>\n                <h3>Balance: £{balance}</h3>\n            </div>\n        </div>\n    );\n};\n\nexport default PersonalFinance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}