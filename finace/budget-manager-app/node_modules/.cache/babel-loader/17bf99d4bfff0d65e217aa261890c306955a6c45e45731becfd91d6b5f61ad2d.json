{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LAMMERT\\\\Desktop\\\\poryecto\\\\budget-manager-app\\\\src\\\\components\\\\PersonalFinance.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport './PersonalFinance.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst incomeCategories = [\"Salary – Wages earned from full-time or part-time employment\", \"Hourly Wages – Income earned based on hours worked\", \"Self-Employment Income – Earnings from freelancing, consulting, or running a business\", \"Commission – Earnings based on sales performance (e.g., real estate agents, salespeople)\", \"Bonuses – Extra earnings from work performance or company profits\", \"Investment Income – Dividends from stocks, interest from bonds\", \"Rental Income – Earnings from renting out property\", \"Royalties – Income from intellectual property, books, music, patents\", \"Affiliate Marketing Income – Earnings from promoting products/services\", \"Advertising Revenue – Income from YouTube, blogs, or social media monetization\", \"Unemployment Benefits – Financial aid for those out of work\", \"Disability Benefits – Government support for individuals with disabilities\", \"Social Security/Pension – Retirement benefits\", \"Child Support/Alimony – Payments received from a former spouse\", \"Scholarships/Grants – Education funding that doesn’t require repayment\", \"Side Hustles – Income from gig work (Uber, Airbnb, online selling, etc.)\", \"Lottery & Gambling Winnings – Money won from betting, casinos, or lotteries\", \"Inheritances & Gifts – Money received from family or friends\", \"Tax Refunds – Money returned by the government after tax filing\"];\nconst expenseCategories = [\"Housing – Rent, mortgage, property taxes, home maintenance\", \"Utilities – Electricity, water, gas, internet, phone bills\", \"Groceries – Food, household essentials\", \"Transportation – Fuel, public transport, car payments, maintenance, insurance\", \"Healthcare – Insurance, medical bills, prescriptions, dental, vision care\", \"Debt Payments – Loan repayments, credit card bills\", \"Insurance – Health, life, car, home, disability insurance\", \"Discretionary Expenses (Wants) – Dining Out, Entertainment, Shopping, Travel & Vacations, Subscriptions, Gifts & Donations\", \"Savings & Investments – Emergency Fund, Retirement Savings, Education\"];\nconst PersonalFinance = () => {\n  _s();\n  const [income, setIncome] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [selectedIncomeCategory, setSelectedIncomeCategory] = useState('');\n  const [incomeAmount, setIncomeAmount] = useState('');\n  const [selectedExpenseCategory, setSelectedExpenseCategory] = useState('');\n  const [expenseAmount, setExpenseAmount] = useState('');\n  const addIncome = () => {\n    if (selectedIncomeCategory && incomeAmount) {\n      setIncome([...income, {\n        category: selectedIncomeCategory,\n        amount: parseFloat(incomeAmount)\n      }]);\n      setSelectedIncomeCategory('');\n      setIncomeAmount('');\n    }\n  };\n  const addExpense = () => {\n    if (selectedExpenseCategory && expenseAmount) {\n      setExpenses([...expenses, {\n        category: selectedExpenseCategory,\n        amount: parseFloat(expenseAmount)\n      }]);\n      setSelectedExpenseCategory('');\n      setExpenseAmount('');\n    }\n  };\n  const editIncome = index => {\n    const newAmount = prompt(\"Enter new amount:\", income[index].amount);\n    if (newAmount) {\n      const updatedIncome = [...income];\n      updatedIncome[index].amount = parseFloat(newAmount);\n      setIncome(updatedIncome);\n    }\n  };\n  const removeIncome = index => {\n    const updatedIncome = income.filter((_, i) => i !== index);\n    setIncome(updatedIncome);\n  };\n  const editExpense = index => {\n    const newAmount = prompt(\"Enter new amount:\", expenses[index].amount);\n    if (newAmount) {\n      const updatedExpenses = [...expenses];\n      updatedExpenses[index].amount = parseFloat(newAmount);\n      setExpenses(updatedExpenses);\n    }\n  };\n  const removeExpense = index => {\n    const updatedExpenses = expenses.filter((_, i) => i !== index);\n    setExpenses(updatedExpenses);\n  };\n  const totalIncome = income.reduce((acc, curr) => acc + curr.amount, 0);\n  const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n  const balance = totalIncome - totalExpenses;\n  const incomeData = income.reduce((acc, curr) => {\n    acc[curr.category] = (acc[curr.category] || 0) + curr.amount;\n    return acc;\n  }, {});\n  const expenseData = expenses.reduce((acc, curr) => {\n    acc[curr.category] = (acc[curr.category] || 0) + curr.amount;\n    return acc;\n  }, {});\n  const incomeDetails = Object.entries(incomeData).map(([category, amount]) => `${category}: £${amount}`);\n  const expenseDetails = Object.entries(expenseData).map(([category, amount]) => `${category}: £${amount}`);\n  const data = {\n    labels: Object.keys(incomeData).concat(Object.keys(expenseData)),\n    datasets: [{\n      label: 'Income (£)',\n      data: Object.values(incomeData),\n      backgroundColor: '#4CAF50'\n    }, {\n      label: 'Expenses (£)',\n      data: Object.values(expenseData),\n      backgroundColor: '#FF6384'\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Financial Overview'\n      }\n    },\n    scales: {\n      x: {\n        stacked: true\n      },\n      y: {\n        stacked: true,\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"personal-finance\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"finance-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finance-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedIncomeCategory,\n              onChange: e => setSelectedIncomeCategory(e.target.value),\n              className: \"finance-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Income Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this), incomeCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category,\n                children: category\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: incomeAmount,\n              onChange: e => setIncomeAmount(e.target.value),\n              placeholder: \"Income Amount (\\xA3)\",\n              className: \"finance-input small-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addIncome,\n            className: \"finance-button\",\n            children: \"Add Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: income.map((inc, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [inc.category, \": \\xA3\", inc.amount, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => editIncome(index),\n                className: \"edit-button\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeIncome(index),\n                className: \"remove-button\",\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Expenses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedExpenseCategory,\n              onChange: e => setSelectedExpenseCategory(e.target.value),\n              className: \"finance-select\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Expense Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 33\n              }, this), expenseCategories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category,\n                children: category\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: expenseAmount,\n              onChange: e => setExpenseAmount(e.target.value),\n              placeholder: \"Expense Amount (\\xA3)\",\n              className: \"finance-input small-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addExpense,\n            className: \"finance-button\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: expenses.map((expense, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [expense.category, \": \\xA3\", expense.amount, /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => editExpense(index),\n                className: \"edit-button\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => removeExpense(index),\n                className: \"remove-button\",\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"finance-overview\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"totals\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"total-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Total Income:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\xA3\", totalIncome]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"total-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Total Expenses:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\xA3\", totalExpenses]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"total-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Balance:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\xA3\", balance]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Financial Overview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: data,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Income Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: incomeDetails.map((detail, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: detail\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Expense Details:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: expenseDetails.map((detail, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: detail\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n};\n_s(PersonalFinance, \"xdWeDu4k+yuZyaKvvTzOaz+gIbQ=\");\n_c = PersonalFinance;\nexport default PersonalFinance;\nvar _c;\n$RefreshReg$(_c, \"PersonalFinance\");","map":{"version":3,"names":["React","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","incomeCategories","expenseCategories","PersonalFinance","_s","income","setIncome","expenses","setExpenses","selectedIncomeCategory","setSelectedIncomeCategory","incomeAmount","setIncomeAmount","selectedExpenseCategory","setSelectedExpenseCategory","expenseAmount","setExpenseAmount","addIncome","category","amount","parseFloat","addExpense","editIncome","index","newAmount","prompt","updatedIncome","removeIncome","filter","_","i","editExpense","updatedExpenses","removeExpense","totalIncome","reduce","acc","curr","totalExpenses","balance","incomeData","expenseData","incomeDetails","Object","entries","map","expenseDetails","data","labels","keys","concat","datasets","label","values","backgroundColor","options","responsive","plugins","legend","position","title","display","text","scales","x","stacked","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","placeholder","onClick","inc","expense","detail","_c","$RefreshReg$"],"sources":["C:/Users/LAMMERT/Desktop/poryecto/budget-manager-app/src/components/PersonalFinance.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport './PersonalFinance.css';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nconst incomeCategories = [\n    \"Salary – Wages earned from full-time or part-time employment\",\n    \"Hourly Wages – Income earned based on hours worked\",\n    \"Self-Employment Income – Earnings from freelancing, consulting, or running a business\",\n    \"Commission – Earnings based on sales performance (e.g., real estate agents, salespeople)\",\n    \"Bonuses – Extra earnings from work performance or company profits\",\n    \"Investment Income – Dividends from stocks, interest from bonds\",\n    \"Rental Income – Earnings from renting out property\",\n    \"Royalties – Income from intellectual property, books, music, patents\",\n    \"Affiliate Marketing Income – Earnings from promoting products/services\",\n    \"Advertising Revenue – Income from YouTube, blogs, or social media monetization\",\n    \"Unemployment Benefits – Financial aid for those out of work\",\n    \"Disability Benefits – Government support for individuals with disabilities\",\n    \"Social Security/Pension – Retirement benefits\",\n    \"Child Support/Alimony – Payments received from a former spouse\",\n    \"Scholarships/Grants – Education funding that doesn’t require repayment\",\n    \"Side Hustles – Income from gig work (Uber, Airbnb, online selling, etc.)\",\n    \"Lottery & Gambling Winnings – Money won from betting, casinos, or lotteries\",\n    \"Inheritances & Gifts – Money received from family or friends\",\n    \"Tax Refunds – Money returned by the government after tax filing\"\n];\n\nconst expenseCategories = [\n    \"Housing – Rent, mortgage, property taxes, home maintenance\",\n    \"Utilities – Electricity, water, gas, internet, phone bills\",\n    \"Groceries – Food, household essentials\",\n    \"Transportation – Fuel, public transport, car payments, maintenance, insurance\",\n    \"Healthcare – Insurance, medical bills, prescriptions, dental, vision care\",\n    \"Debt Payments – Loan repayments, credit card bills\",\n    \"Insurance – Health, life, car, home, disability insurance\",\n    \"Discretionary Expenses (Wants) – Dining Out, Entertainment, Shopping, Travel & Vacations, Subscriptions, Gifts & Donations\",\n    \"Savings & Investments – Emergency Fund, Retirement Savings, Education\"\n];\n\nconst PersonalFinance = () => {\n    const [income, setIncome] = useState([]);\n    const [expenses, setExpenses] = useState([]);\n    const [selectedIncomeCategory, setSelectedIncomeCategory] = useState('');\n    const [incomeAmount, setIncomeAmount] = useState('');\n    const [selectedExpenseCategory, setSelectedExpenseCategory] = useState('');\n    const [expenseAmount, setExpenseAmount] = useState('');\n\n    const addIncome = () => {\n        if (selectedIncomeCategory && incomeAmount) {\n            setIncome([...income, { category: selectedIncomeCategory, amount: parseFloat(incomeAmount) }]);\n            setSelectedIncomeCategory('');\n            setIncomeAmount('');\n        }\n    };\n\n    const addExpense = () => {\n        if (selectedExpenseCategory && expenseAmount) {\n            setExpenses([...expenses, { category: selectedExpenseCategory, amount: parseFloat(expenseAmount) }]);\n            setSelectedExpenseCategory('');\n            setExpenseAmount('');\n        }\n    };\n\n    const editIncome = (index) => {\n        const newAmount = prompt(\"Enter new amount:\", income[index].amount);\n        if (newAmount) {\n            const updatedIncome = [...income];\n            updatedIncome[index].amount = parseFloat(newAmount);\n            setIncome(updatedIncome);\n        }\n    };\n\n    const removeIncome = (index) => {\n        const updatedIncome = income.filter((_, i) => i !== index);\n        setIncome(updatedIncome);\n    };\n\n    const editExpense = (index) => {\n        const newAmount = prompt(\"Enter new amount:\", expenses[index].amount);\n        if (newAmount) {\n            const updatedExpenses = [...expenses];\n            updatedExpenses[index].amount = parseFloat(newAmount);\n            setExpenses(updatedExpenses);\n        }\n    };\n\n    const removeExpense = (index) => {\n        const updatedExpenses = expenses.filter((_, i) => i !== index);\n        setExpenses(updatedExpenses);\n    };\n\n    const totalIncome = income.reduce((acc, curr) => acc + curr.amount, 0);\n    const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n    const balance = totalIncome - totalExpenses;\n\n    const incomeData = income.reduce((acc, curr) => {\n        acc[curr.category] = (acc[curr.category] || 0) + curr.amount;\n        return acc;\n    }, {});\n\n    const expenseData = expenses.reduce((acc, curr) => {\n        acc[curr.category] = (acc[curr.category] || 0) + curr.amount;\n        return acc;\n    }, {});\n\n    const incomeDetails = Object.entries(incomeData).map(([category, amount]) => `${category}: £${amount}`);\n    const expenseDetails = Object.entries(expenseData).map(([category, amount]) => `${category}: £${amount}`);\n\n    const data = {\n        labels: Object.keys(incomeData).concat(Object.keys(expenseData)),\n        datasets: [\n            {\n                label: 'Income (£)',\n                data: Object.values(incomeData),\n                backgroundColor: '#4CAF50',\n            },\n            {\n                label: 'Expenses (£)',\n                data: Object.values(expenseData),\n                backgroundColor: '#FF6384',\n            },\n        ],\n    };\n\n    const options = {\n        responsive: true,\n        plugins: {\n            legend: {\n                position: 'top',\n            },\n            title: {\n                display: true,\n                text: 'Financial Overview',\n            },\n        },\n        scales: {\n            x: {\n                stacked: true,\n            },\n            y: {\n                stacked: true,\n                beginAtZero: true,\n            },\n        },\n    };\n\n    return (\n        <div className=\"personal-finance\">\n            <div className=\"finance-container\">\n                <div className=\"finance-form\">\n                    <div>\n                        <h3>Income</h3>\n                        <div className=\"input-group\">\n                            <select \n                                value={selectedIncomeCategory} \n                                onChange={(e) => setSelectedIncomeCategory(e.target.value)}\n                                className=\"finance-select\"\n                            >\n                                <option value=\"\">Select Income Category</option>\n                                {incomeCategories.map((category, index) => (\n                                    <option key={index} value={category}>{category}</option>\n                                ))}\n                            </select>\n                            <input \n                                type=\"number\" \n                                value={incomeAmount} \n                                onChange={(e) => setIncomeAmount(e.target.value)} \n                                placeholder=\"Income Amount (£)\" \n                                className=\"finance-input small-input\"\n                            />\n                        </div>\n                        <button onClick={addIncome} className=\"finance-button\">Add Income</button>\n                        <ul>\n                            {income.map((inc, index) => (\n                                <li key={index}>\n                                    {inc.category}: £{inc.amount}\n                                    <button onClick={() => editIncome(index)} className=\"edit-button\">Edit</button>\n                                    <button onClick={() => removeIncome(index)} className=\"remove-button\">Remove</button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    <div>\n                        <h3>Expenses</h3>\n                        <div className=\"input-group\">\n                            <select \n                                value={selectedExpenseCategory} \n                                onChange={(e) => setSelectedExpenseCategory(e.target.value)}\n                                className=\"finance-select\"\n                            >\n                                <option value=\"\">Select Expense Category</option>\n                                {expenseCategories.map((category, index) => (\n                                    <option key={index} value={category}>{category}</option>\n                                ))}\n                            </select>\n                            <input \n                                type=\"number\" \n                                value={expenseAmount} \n                                onChange={(e) => setExpenseAmount(e.target.value)} \n                                placeholder=\"Expense Amount (£)\" \n                                className=\"finance-input small-input\"\n                            />\n                        </div>\n                        <button onClick={addExpense} className=\"finance-button\">Add Expense</button>\n                        <ul>\n                            {expenses.map((expense, index) => (\n                                <li key={index}>\n                                    {expense.category}: £{expense.amount}\n                                    <button onClick={() => editExpense(index)} className=\"edit-button\">Edit</button>\n                                    <button onClick={() => removeExpense(index)} className=\"remove-button\">Remove</button>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n                <div className=\"finance-overview\">\n                    <div className=\"totals\">\n                        <div className=\"total-item\">\n                            <h3>Total Income:</h3>\n                            <p>£{totalIncome}</p>\n                        </div>\n                        <div className=\"total-item\">\n                            <h3>Total Expenses:</h3>\n                            <p>£{totalExpenses}</p>\n                        </div>\n                        <div className=\"total-item\">\n                            <h3>Balance:</h3>\n                            <p>£{balance}</p>\n                        </div>\n                    </div>\n                    <h3>Financial Overview</h3>\n                    <Bar data={data} options={options} />\n                    <div className=\"details\">\n                        <h4>Income Details:</h4>\n                        <ul>\n                            {incomeDetails.map((detail, index) => (\n                                <li key={index}>{detail}</li>\n                            ))}\n                        </ul>\n                        <h4>Expense Details:</h4>\n                        <ul>\n                            {expenseDetails.map((detail, index) => (\n                                <li key={index}>{detail}</li>\n                            ))}\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PersonalFinance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}